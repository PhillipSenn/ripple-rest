FORMAT: 1A
HOST: http://www.google.com

# ripple-rest
A RESTful API for interacting with the Ripple Network.


## Amounts

Note that all amounts in `ripple-rest` are denoted as objects with the following format:

```
{
  "value": "1.0", // Represented as a string to retain precision
  "currency": "USD",
  "issuer": "r..."
}
```

XRP amounts are formatted in the same way, with issuer set to an empty string:

```
{
  "value": "1.0",
  "currency": "XRP",
  "issuer": ""
}
```

# Group Payments

The Payment format used by `ripple-rest` includes the following fields:

__Minimum Required Fields__

- `source_account` - The Ripple Address of the sender's account
- `destination_account` - The Ripple Address of the receiver's account
- `destination_amount` - The [Amount](#Amounts) that will be delivered to the `destination_account`

__Optional Fields__

- `source_tag` - An optional string representation of a 32-bit integer that is used to identify the sender's hosted account at a gateway
- `destination_tag` - An optional string representation of a 32-bit integer that is used to identify the receiver's hosted account at a gateway
- `source_amount` - An optional [Amount](#Amounts) that should be specified for cross-currency payments or payments to and from the same currency but issued by different gateways. The `source_account` will be charged a maximum of the `source_amount`'s value + the `source_slippage`
- `source_slippage` - An optional string representation of a floating point number used as a buffer added to the `source_amount`'s value
- `invoice_id` - An optional 256-bit hash that can be used to identify a particular payment, particularly in the case of payments using the [Bridge Protocol](https://ripple.com/wiki/Services_API#Outbound_bridges). Note that this is distinct from the `client_resource_id`
- `paths` - A field that should be treated as opaque, used internally to specify payment "paths" through the network. This will be set automatically by the pathfinding endpoint but advanced users can set this to a JSON array representing the [PathSet](https://ripple.com/wiki/Payment_paths)
- `partial_payment` - An optional boolean that indicates whether the payment should be executed even if the whole amount cannot be delivered because of a lack of liquidity or funds in the source_account account. Defaults to false
- `no_direct_ripple` - An optional boolean that can be set to true if paths are specified and the sender would like the Ripple Network to disregard any direct paths from the source_account to the destination_account. This may be used to take advantage of an arbitrage opportunity or by gateways wishing to issue balances from a hot wallet to a user who has mistakenly set a trustline directly to the hot wallet. Defaults to false

__Fields Generated After Submission__

- `state` - The current state of the payment. Possible values are `pending`, `validated`, or `failed`
- `result` - The `rippled` result code. `tesSUCCESS` indicates the payment was accepted and applied by the `rippled`, anything else indicates a failure. Error categories are documented [here](https://ripple.com/wiki/Transaction_errors)
- `ledger` - The ledger sequence number containing the payment record. If the payment failed off-network this indicates the ledger at which time the payment failed
- `hash` - The 256-bit hash of the payment's serialized binary format. This is used throughout the Ripple protocol as the unique identifier for the transaction
- `timestamp` - The timestamp representing when the payment was validated and written into the Ripple ledger
- `fee` - The Ripple Network transaction fee, represented in whole XRP (NOT \"drops\", or millionths of an XRP, which is used elsewhere in the Ripple protocol)
- `direction` - The direction of the payment, from the perspective of the account being queried. Possible values are `incoming`, `outgoing`, and `passthrough`
- `source_balance_changes` - Parsed from the validated transaction metadata, this array of [Amounts](#Amounts) represents all of the changes to balances held by the `source_account`. Most often this will have one amount representing the Ripple Network fee and, if the `source_amount` was not XRP, one amount representing the actual `source_amount` that was sent
- `destination_balance_changes` - Parsed from the validated transaction metadata, this array of [Amounts](#Amounts) represents the changes to balances held by the `destination_account`. For those receiving payments this is important to check because if the `partial_payment` flag is set this value may be less than the `destination_amount`

### POST /v1/payments

Submit a payment.

+ Request

    + Body
    
    ```
    {
        "secret": "s...",
        "client_resource_id": "cd26cd93-6363-45e1-8270-1df6bf12461e",
        "payment": {
            "source_account": "rKXCummUHnenhYudNb9UoJ4mGBR75vFcgz",
            "destination_account": "rNw4ozCG514KEjPs5cDrqEcdsi31Jtfm5r",
            "destination_amount": {
                "value": ".000010",
                "currency": "XRP",
                "issuer": ""
            }
        }
    }
    ```
    
    + Schema
    
    ```
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Payment",
      "description": "A flattened Payment object used by the ripple-rest API",
      "type": "object",
      "properties": {
        "source_account": {
          "description": "The Ripple account address of the Payment sender",
          "$ref": "RippleAddress"
        },
        "source_tag": {
          "description": "A string representing an unsigned 32-bit integer most commonly used to refer to a sender's hosted account at a Ripple gateway",
          "$ref": "UINT32"
        },
        "source_amount": {
          "description": "An optional amount that can be specified to constrain cross-currency payments",
          "$ref": "Amount"
        },
        "source_slippage": {
          "description": "An optional cushion for the source_amount to increase the likelihood that the payment will succeed. The source_account will never be charged more than source_amount.value + source_slippage",
          "$ref": "FloatString"
        },
        "destination_account": {
          "$ref": "RippleAddress"
        },
        "destination_tag": {
          "description": "A string representing an unsigned 32-bit integer most commonly used to refer to a receiver's hosted account at a Ripple gateway",
          "$ref": "UINT32"
        },
        "destination_amount ": {
          "description": "The amount the destination_account will receive",
          "$ref": "Amount"
        },
        "invoice_id": {
          "description": "A 256-bit hash that can be used to identify a particular payment",
          "$ref": "Hash256"
        },
        "paths ": {
          "description": "A \"stringified\" version of the Ripple PathSet structure that users should treat as opaque",
          "type": "string"
        },
        "partial_payment": {
          "description": "A boolean that, if set to true, indicates that this payment should go through even if the whole amount cannot be delivered because of a lack of liquidity or funds in the source_account account",
          "type": "boolean"
        },
        "no_direct_ripple": {
          "description": "A boolean that can be set to true if paths are specified and the sender would like the Ripple Network to disregard any direct paths from the source_account to the destination_account. This may be used to take advantage of an arbitrage opportunity or by gateways wishing to issue balances from a hot wallet to a user who has mistakenly set a trustline directly to the hot wallet",
          "type": "boolean"
        }
      },
      "required": ["source_account", "destination_account", "destination_amount"]
    }
    ```

+ Response 200 (application/json)

    ```
    {
        "success": true,
        "status_url": ".../v1/accounts/rKXCummUHnenhYudNb9UoJ4mGBR75vFcgz/payments/cd26cd93-6363-45e1-8270-1df6bf12461e"
    }
    ```

### GET /v1/accounts/{address}/payments/{hash,client_resource_id}

Retrieve the details of a particular payment from `rippled` or, in the case of one submitted to `ripple-rest` that failed locally, the local database of `ripple-rest`. 

+ Parameters

    + hash (optional, 256-bit string written in hex, `389720F6FD8A144F171708F9ECB334D704CBCFEFBCDA152D931AC34FB5F9E32B`) ... The hash of a particular payment transaction. Note that transaction hashes are used throughout Ripple as unique identifiers for transactions.
    + client_resource_id (optional, string of ASCII-printable characters, `d9aa7bf0-f42a-4c73-b5e7-3018f6a42792`) ... The client-supplied unique identifier of a payment submitted through `ripple-rest`. Note that these are only stored in `ripple-rest`'s, not in the transaction details on Ripple.
    
+ Response 200

### GET /v1/accounts/{address}/payments{?start_ledger,end_ledger,exclude_failed,source_account,destination_account,earliest_first,results_per_page,page}

Retrieve the details of multiple payments from `rippled` and `ripple-rest`. The response will contain an array of objects that each have a `client_resource_id` field and a `payment` field.

If no payments match the specified parameters the `payments` array will be empty.

+ Parameters

    + start_ledger = `(earliest ledger in connected rippled)` (optional, integer, `32570`) ... If `earliest_first` is set to true this will be the index number of the earliest ledger queried, or the most recent one if `earliest_first` is set to false. 
    + end_ledger = `(latest ledger in connected rippled)` (optional, integer, `5000000`) ... If `earliest_first` is set to true this will be the index number of the most recent ledger queried, or the earliest one if `earliest_first` is set to false.
    + exclude_failed = `false` (optional, boolean, `false`) ... If set to true, limit the results to payments that were successfully validated and written into the Ripple Ledger
    + source_account (optional, Ripple Address, `rKXCummUHnenhYudNb9UoJ4mGBR75vFcgz`) ... If specified, limit the results to payments initiated by a particular account
    + destination_account (optional, Ripple Address, `rNw4ozCG514KEjPs5cDrqEcdsi31Jtfm5r`) ... If specified, limit the results to payments made to a particular account
    + earliest_first = `true` (optional, boolean, `true`) ... Determines whether results should be displayed in ascending or descending order, with respect to the ledger/time at which they were validated
    + results_per_page = `10` (optional, integer, `10`) ... Number of results to display per page
    + page = `1` (optional, integer, `1`) ... Page number. Note that if fewer results than the `results_per_page` are returned, there are no pages

+ Response 200 (application/json)

  ```
  {
    "success": true,
    "payments": [{
      "client_resource_id": "",
      "payment": {
        /* ... Payment ... */
      }
    }, {
      "client_resource_id": "",
      "payment": {
        /* ... Payment ... */
      }
    }]
  }
  ```

# Group Account Settings

# Group Balances

# Group Trustlines


